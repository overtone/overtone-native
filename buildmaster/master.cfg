# -*- python -*-
# ex: set syntax=python:

c = BuildmasterConfig = {}

####### BUILDSLAVES

from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("ubuntu-lucid-x86_64", "pass"),
               BuildSlave("ubuntu-lucid-x86", "pass"),
               BuildSlave("macosx-snowleopard-x86_64", "pass")]

c['slavePortnum'] = 9989

####### CHANGESOURCES

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = GitPoller(
        'git://supercollider.git.sourceforge.net/gitroot/supercollider/supercollider',
        workdir='gitpoller-workdir', branch='master',
        pollinterval=300)

####### SCHEDULERS

from buildbot.schedulers.basic import SingleBranchScheduler
c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
                            name="all",
                            branch='master',
                            treeStableTimer=None,
                            builderNames=["supercollider-ubuntu-lucid-x86_64",
                                          "supercollider-ubuntu-lucid-x86",
                                          "supercollider-macosx-snowleopard-x86_64",
                                          "sc3-plugins-ubuntu-lucid-x86_64",
                                          "sc3-plugins-ubuntu-lucid-x86",
                                          "sc3-plugins-macosx-snowleopard-x86_64",
                                          ]))

####### BUILDERS

from buildbot.process.factory import BuildFactory
from buildbot.steps.source import Git
from buildbot.steps.shell import ShellCommand, Compile, Configure
from buildbot.steps.transfer import FileDownload, FileUpload
from buildbot.process.properties import WithProperties

sc_checkout = Git(repourl='git://supercollider.git.sourceforge.net/gitroot/supercollider/supercollider', mode='copy', submodules=True, alwaysUseLatest=False)

sc_mkdir = ShellCommand(command=["mkdir", "-p", "build"])
sc_configure = Configure(command=["cmake", ".."], workdir="build/build")
sc_compile = Compile(command=["make", "-j3"], workdir="build/build")

sc_dl_linux = FileDownload(mastersrc="supercollider-linux.txt", slavedest="files.txt")
sc_dl_macosx = FileDownload(mastersrc="supercollider-linux.txt", slavedest="files.txt")

sc_pkg = ShellCommand(command="tar cjf supercollider.tar.bz2 `cat files.txt`")
sc_ul = FileUpload(slavesrc="supercollider.tar.bz2",
                   masterdest=WithProperties("/vagrant/builds/supercollider-%s-%s.tar.bz2", "slavename", "got_revision"))

sc_linux_factory = BuildFactory([sc_checkout, sc_mkdir, sc_configure, sc_compile, sc_dl_linux, sc_pkg, sc_ul])
sc_macosx_factory = BuildFactory([sc_checkout, sc_mkdir, sc_configure, sc_compile, sc_dl_macosx, sc_pkg, sc_ul])

plug_factory = BuildFactory()
plug_factory.addStep(Git(repourl='git://sc3-plugins.git.sourceforge.net/gitroot/sc3-plugins/sc3-plugins',
                         mode='copy', submodules=True, alwaysUseLatest=True))

from buildbot.config import BuilderConfig

c['builders'] = [ BuilderConfig(name="supercollider-macosx-snowleopard-x86_64",
                                slavenames=["macosx-snowleopard-x86_64"],
                                factory=sc_linux_factory,
                                builddir="/ramdisk/supercollider-macosx-snowleopard-x86_64"),

                  BuilderConfig(name="supercollider-ubuntu-lucid-x86_64",
                                slavenames=["ubuntu-lucid-x86_64"],
                                factory=sc_linux_factory,
                                builddir="/ramdisk/supercollider-ubuntu-lucid-x86_64"),

                  BuilderConfig(name="supercollider-ubuntu-lucid-x86",
                                slavenames=["ubuntu-lucid-x86"],
                                factory=sc_linux_factory,
                                builddir="/ramdisk/supercollider-ubuntu-lucid-x86"),

                  BuilderConfig(name="sc3-plugins-macosx-snowleopard-x86_64",
                                slavenames=["macosx-snowleopard-x86_64"],
                                factory=plug_factory,
                                builddir="/ramdisk/sc3-plugins-macosx-snowleopard-x86_64"),

                  BuilderConfig(name="sc3-plugins-ubuntu-lucid-x86_64",
                                slavenames=["ubuntu-lucid-x86_64"],
                                factory=plug_factory,
                                builddir="/ramdisk/sc3-plugins-ubuntu-lucid-x86_64"),

                  BuilderConfig(name="sc3-plugins-ubuntu-lucid-x86",
                                slavenames=["ubuntu-lucid-x86"],
                                factory=plug_factory,
                                builddir="/ramdisk/sc3-plugins-ubuntu-lucid-x86"), ]

####### STATUS TARGETS

c['status'] = []

from buildbot.status import html
from buildbot.status.web import auth, authz
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = True, # use this to test your slave once it is set up
    forceAllBuilds = True,
    pingBuilder = True,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

c['title'] = "Overtone Native"
c['titleURL'] = "http://overtone.github.com/"

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

c['db_url'] = "sqlite:///state.sqlite"

