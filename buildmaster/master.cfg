# -*- python -*-
# ex: set syntax=python:

c = BuildmasterConfig = {}

####### BUILDSLAVES

from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("ubuntu-lucid-x86_64", "pass"),
               BuildSlave("ubuntu-lucid-x86", "pass")]

c['slavePortnum'] = 9989

####### CHANGESOURCES

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = GitPoller(
        'git://supercollider.git.sourceforge.net/gitroot/supercollider/supercollider',
        workdir='gitpoller-workdir', branch='master',
        pollinterval=300)

####### SCHEDULERS

from buildbot.schedulers.basic import SingleBranchScheduler
c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
                            name="all",
                            branch='master',
                            treeStableTimer=None,
                            builderNames=["supercollider", "sc3-plugins"]))

####### BUILDERS

from buildbot.process.factory import BuildFactory
from buildbot.steps.source import Git
from buildbot.steps.shell import ShellCommand, Compile, Configure
from buildbot.steps.transfer import FileDownload, FileUpload
from buildbot.process.properties import WithProperties

sc_factory = BuildFactory()
sc_factory.addStep(Git(repourl='git://supercollider.git.sourceforge.net/gitroot/supercollider/supercollider', mode='copy', submodules=True, alwaysUseLatest=False))
sc_factory.addStep(ShellCommand(command=["mkdir", "-p", "build"]))
sc_factory.addStep(Configure(command=["cmake", ".."], workdir="build/build"))
sc_factory.addStep(Compile(command=["make"], workdir="build/build"))
sc_factory.addStep(FileDownload(mastersrc="supercollider-linux.txt",
                                slavedest="files.txt"))
sc_factory.addStep(ShellCommand(command="tar cjf supercollider.tar.bz2 `cat files.txt`"))
sc_factory.addStep(FileUpload(slavesrc="supercollider.tar.bz2",
                              masterdest=WithProperties("/vagrant/builds/supercollider-linux-x86_64-%s.tar.bz2", "got_revision")))

plug_factory = BuildFactory()
plug_factory.addStep(Git(repourl='git://sc3-plugins.git.sourceforge.net/gitroot/sc3-plugins/sc3-plugins', mode='copy', submodules=True, alwaysUseLatest=True))
#plug_factory.addStep(ShellCommand(command=["trial", "pyflakes"]))

from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    BuilderConfig(name="supercollider",
      slavenames=["ubuntu-lucid-x86_64"],
      factory=sc_factory))
c['builders'].append(
    BuilderConfig(name="sc3-plugins",
      slavenames=["ubuntu-lucid-x86_64"],
      factory=plug_factory))

####### STATUS TARGETS

c['status'] = []

from buildbot.status import html
from buildbot.status.web import auth, authz
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = True, # use this to test your slave once it is set up
    forceAllBuilds = True,
    pingBuilder = True,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

c['title'] = "Overtone Native"
c['titleURL'] = "http://overtone.github.com/"

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

c['db_url'] = "sqlite:///state.sqlite"

